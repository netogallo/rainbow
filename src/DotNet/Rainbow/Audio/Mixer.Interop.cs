// This file was generated by Rainbow for .NET Core. Do not modify.
//
// Copyright (c) 2010-16 Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

namespace Rainbow.Audio
{
    using System;

    using Interop;

    /// <content>
    /// Contains unmanaged delegates for <see cref="Mixer"/>.
    /// </content>
    public sealed partial class Mixer : NativeObject<Mixer>
    {
        private static FuncCP loadSound;
        private static FuncCP loadStream;
        private static FuncPB isPaused;
        private static FuncPB isPlaying;
        private static ActionPI setLoopCount;
        private static ActionPF setVolume;
        private static ActionPV setWorldPosition;
        private static ActionP pause;
        private static FuncPP playChannel;
        private static FuncPVP playSound;
        private static ActionP stop;

        internal static void InitializeComponents(IntPtr ptr)
        {
            var ftable = InitializeComponents<UMixer>(ptr);
            GetDelegateForFunctionPointer(ftable.LoadSoundFunc, out loadSound);
            GetDelegateForFunctionPointer(ftable.LoadStreamFunc, out loadStream);
            GetDelegateForFunctionPointer(ftable.IsPausedFunc, out isPaused);
            GetDelegateForFunctionPointer(ftable.IsPlayingFunc, out isPlaying);
            GetDelegateForFunctionPointer(ftable.SetLoopCountFunc, out setLoopCount);
            GetDelegateForFunctionPointer(ftable.SetVolumeFunc, out setVolume);
            GetDelegateForFunctionPointer(ftable.SetWorldPositionFunc, out setWorldPosition);
            GetDelegateForFunctionPointer(ftable.PauseFunc, out pause);
            GetDelegateForFunctionPointer(ftable.PlayChannelFunc, out playChannel);
            GetDelegateForFunctionPointer(ftable.PlaySoundFunc, out playSound);
            GetDelegateForFunctionPointer(ftable.StopFunc, out stop);
        }
    }
}
