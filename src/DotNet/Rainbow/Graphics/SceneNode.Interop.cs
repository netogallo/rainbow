// This file was generated by Rainbow for .NET Core. Do not modify.
//
// Copyright (c) 2010-16 Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

namespace Rainbow.Graphics
{
    using System;

    using Interop;

    /// <content>
    /// Contains unmanaged delegates for <see cref="SceneNode"/>.
    /// </content>
    public sealed partial class SceneNode : NativeObject<SceneNode>
    {
        private static MemberFuncB isEnabled;
        private static MemberActionB setEnabled;
        private static MemberFuncP addChild;
        private static MemberFuncPP addChildAnimation;
        private static MemberFuncPP addChildLabel;
        private static MemberFuncPP addChildNode;
        private static MemberFuncPP addChildSpritebatch;
        private static MemberActionV move;
        private static ActionP remove;

        internal static void InitializeComponents(IntPtr ptr)
        {
            var ftable = InitializeComponents<USceneNode>(ptr);
            GetDelegateForFunctionPointer(ftable.IsEnabledFunc, out isEnabled);
            GetDelegateForFunctionPointer(ftable.SetEnabledFunc, out setEnabled);
            GetDelegateForFunctionPointer(ftable.AddChildFunc, out addChild);
            GetDelegateForFunctionPointer(ftable.AddChildAnimationFunc, out addChildAnimation);
            GetDelegateForFunctionPointer(ftable.AddChildLabelFunc, out addChildLabel);
            GetDelegateForFunctionPointer(ftable.AddChildNodeFunc, out addChildNode);
            GetDelegateForFunctionPointer(ftable.AddChildSpritebatchFunc, out addChildSpritebatch);
            GetDelegateForFunctionPointer(ftable.MoveFunc, out move);
            GetDelegateForFunctionPointer(ftable.RemoveFunc, out remove);
        }
    }
}
