// This file was generated by Rainbow for .NET Core. Do not modify.
//
// Copyright (c) 2010-16 Bifrost Entertainment AS and Tommy Nguyen
// Distributed under the MIT License.
// (See accompanying file LICENSE or copy at http://opensource.org/licenses/MIT)

namespace Rainbow.Graphics
{
    using System;

    using Interop;

    /// <content>
    /// Contains unmanaged delegates for <see cref="Animation"/>.
    /// </content>
    public sealed partial class Animation : NativeObject<Animation>
    {
        private static FuncPUUpUUIP ctor;
        private static MemberFuncU currentFrame;
        private static MemberFuncU frameRate;
        private static MemberFuncB isStopped;
        private static MemberActionI setDelay;
        private static MemberActionP setEventHandler;
        private static MemberActionU setFrameRate;
        private static MemberActionUpU setFrames;
        private static MemberActionPU setSprite;
        private static MemberActionU jumpTo;
        private static MemberAction start;
        private static MemberAction stop;

        internal static void InitializeComponents(IntPtr ptr)
        {
            var ftable = InitializeComponents<UAnimation>(ptr);
            GetDelegateForFunctionPointer(ftable.CtorFunc, out ctor);
            GetDelegateForFunctionPointer(ftable.CurrentFrameFunc, out currentFrame);
            GetDelegateForFunctionPointer(ftable.FrameRateFunc, out frameRate);
            GetDelegateForFunctionPointer(ftable.IsStoppedFunc, out isStopped);
            GetDelegateForFunctionPointer(ftable.SetDelayFunc, out setDelay);
            GetDelegateForFunctionPointer(ftable.SetEventHandlerFunc, out setEventHandler);
            GetDelegateForFunctionPointer(ftable.SetFrameRateFunc, out setFrameRate);
            GetDelegateForFunctionPointer(ftable.SetFramesFunc, out setFrames);
            GetDelegateForFunctionPointer(ftable.SetSpriteFunc, out setSprite);
            GetDelegateForFunctionPointer(ftable.JumpToFunc, out jumpTo);
            GetDelegateForFunctionPointer(ftable.StartFunc, out start);
            GetDelegateForFunctionPointer(ftable.StopFunc, out stop);
        }
    }
}
